generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AssignmentStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  username   String   @unique
  avatar     String?
  naver_id   String?  @unique @default(uuid())
  kakao_id   String?  @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  owner Owner?
  staff Staff?
}

model Owner {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  store      Store?
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Store {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  ownerId          String            @unique @db.ObjectId // @unique 추가
  owner            Owner             @relation(fields: [ownerId], references: [id])
  store_name       String
  store_tag        String
  address          String
  detail_address   String?
  phone            String            @unique
  theme_color      String?
  staffAssignments StaffAssignment[]
  schedules        Schedule[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Staff {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @unique @db.ObjectId
  user        User              @relation(fields: [userId], references: [id])
  name        String
  birth_year  Int
  phone       String
  gender      String
  assignments StaffAssignment[]
  schedules   Schedule[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model StaffAssignment {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  staffId     String           @db.ObjectId
  staff       Staff            @relation(fields: [staffId], references: [id]) // 필수 관계
  storeId     String           @db.ObjectId
  store       Store            @relation(fields: [storeId], references: [id])
  hourly_wage Float            @default(0.0)
  role        String
  status      AssignmentStatus @default(PENDING)
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
}

model Schedule {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  staffId     String   @db.ObjectId
  staff       Staff    @relation(fields: [staffId], references: [id])
  storeId     String   @db.ObjectId
  store       Store    @relation(fields: [storeId], references: [id])
  title       String
  start       DateTime
  end         DateTime
  isAllDay    Boolean  @default(false)
  isRecurring Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
