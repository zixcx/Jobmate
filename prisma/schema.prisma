generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AssignmentStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // 사용자 고유 ID
  username   String   @unique // 사용자 이름 (고유)
  avatar     String? // 프로필 이미지 URL (선택)
  naver_id   String?  @unique // 네이버 계정 고유 ID (선택, 고유)
  kakao_id   String?  @unique // 카카오 계정 고유 ID (선택, 고유)
  created_at DateTime @default(now()) // 생성 시간
  updated_at DateTime @updatedAt // 업데이트 시간

  owner Owner?
  staff Staff?
}

model Owner {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  store      Store?
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Store {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  ownerId          String            @unique @db.ObjectId
  owner            Owner             @relation(fields: [ownerId], references: [id])
  store_name       String
  store_tag        String
  address          String
  detail_address   String?
  phone            String            @unique
  password         String
  theme_color      String?
  staffAssignments StaffAssignment[]
  schedules        Schedule[] // 기존 필드

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Staff {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @unique @db.ObjectId
  user        User              @relation(fields: [userId], references: [id])
  name        String
  birth_year  Int
  phone       String
  gender      String
  assignments StaffAssignment[]
  schedules   Schedule[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model StaffAssignment {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  staffId     String           @db.ObjectId
  staff       Staff            @relation(fields: [staffId], references: [id])
  storeId     String           @db.ObjectId // store와 연결
  store       Store            @relation(fields: [storeId], references: [id])
  hourly_wage Int              @default(0) // 시급
  role        String // 직무(직급, 업무)
  status      AssignmentStatus @default(PENDING) // 사장님이 알바생 신청을 수락하거나 거절 (pending, accepted, rejected)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Schedule {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  staffId     String   @db.ObjectId // 일정과 staff 관계
  staff       Staff    @relation(fields: [staffId], references: [id])
  storeId     String   @db.ObjectId // 일정과 store 관계
  store       Store    @relation(fields: [storeId], references: [id])
  title       String
  start       DateTime
  end         DateTime
  isAllDay    Boolean  @default(false)
  isRecurring Boolean  @default(false) // 반복 일정 여부
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
